'''
Created on 3 Nov 2015

@author: Sara
'''

#FILE_HANDLE will be a sysarg
#FILE_HANDLE = 'C:\Users\Sara\Dropbox\Bioinformatics Clinical Science\OLAT rotations\Years Two-Three\SAVWork\PhiXRuns\\150818_M00766_0125_000000000-AE8BP\\SampleSheet.csv'
#FILE_HANDLE = sys.argv[1]

class SampleSheetParser(object):
    '''
    A series of methods to parse the SampleSheet generated by the operator prior to 
    sequencing on Illumina sequencing instruments
    '''
    
    def __init__(self,filehandle):
        '''
        In this method initial values for the internal data are created. The instance variables.
        This is within the namespace of the class.
        '''
        self.file_handle = filehandle #So this is basically SampleSheetParser.file_handle
    
    def openfile(self):
        global filename
        self.filename = open(self.file_handle, "r")  #Could possibly stick this in init   
                 
    def getInvestigatorName(self):
        self.filename = open(self.file_handle, "r")
        for line in (self.filename):
            if line.startswith("Investigator Name"):
                return line.split(',')[1].split('-')[0] #Investigator Name/Operator
            
    def getWorksheetNumber(self):
        self.filename = open(self.file_handle, "r")
        findData = None
        for index,line in enumerate(self.filename):
            if line.startswith("Sample_ID"):
                findData = index
                for idx,identifier in enumerate(line.split(',')):
                    if identifier == "Sample_Plate":
                        findData2 = idx
            elif findData == (index-1):
                return line.split(',')[findData2]
            
    def getPipelineName(self):
        self.filename = open(self.file_handle, "r")
        findData = None
        for index,line in enumerate(self.filename):
            if line.startswith("Sample_ID"):
                findData = index
                for idx,identifier in enumerate(line.split(',')):
                    if identifier.rstrip() == "Description": #Need rstrip to remove the whitespace which means it doesn't match
                        findData2 = idx
            elif findData == (index-1):
                #return line.split(',')[findData2].split(';')[0].split('=')[1] #Pipeline Name
                try:
                    pipeline_name = line.split(',')[findData2].split(';')[0].split('=')[1] #Pipeline name only, not version
                    pipeline_version = line.split(',')[findData2].split(';')[1].split('=')[1].rstrip()
                    return str(pipeline_name) + ';' + str(pipeline_version) #Return pipeline name with version after
                except:
                    return ' ' #If there is no entry for the pipeline
    
    def getPipelineVersion(self):
        self.filename = open(self.file_handle, "r")
        findData = None
        for index,line in enumerate(self.filename):
            if line.startswith("Sample_ID"):
                findData = index
                for idx,identifier in enumerate(line.split(',')):
                    if identifier.rstrip() == "Description": #Need rstrip to remove the whitespace which means it doesn't match
                        findData2 = idx
            elif findData == (index-1):
                return line.split(',')[findData2].split(';')[1].split('=')[1].rstrip() #Pipeline version